{"version":3,"file":"static/js/Add.7a2f289d.chunk.js","mappings":"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","sources":["webpack://contacts-front/./src/components/Button/Button.module.css?ce6f","components/Button/Button.jsx","webpack://contacts-front/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","views/Add.jsx","views/Register.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__RBtNK\"};","import PropTypes from \"prop-types\";\nimport s from \"./Button.module.css\";\nfunction Button({ text, onClick, type = \"button\", className }) {\n  return (\n    <button type={type} className={`${s.btn} ${className}`} onClick={onClick}>\n      {text}\n    </button>\n  );\n}\nButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  type: PropTypes.string,\n  className: PropTypes.string,\n};\nexport default Button;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"edit\":\"ContactForm_edit__pQ0uo ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"labelEdit\":\"ContactForm_labelEdit__x6dts ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"inputEdit\":\"ContactForm_inputEdit__oTXNa ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\"};","import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport {\n  useAddContactMutation,\n  useFetchContactsQuery,\n  useUpdateContactMutation,\n} from \"redux/contacts\";\nimport s from \"./ContactForm.module.css\";\nimport Button from \"components/Button\";\n\nfunction ContactForm({\n  type,\n  id,\n  initialName = \"\",\n  initialNumber = \"\",\n  setEdit,\n}) {\n  const [name, setName] = useState(initialName);\n  const [number, setNumber] = useState(initialNumber);\n  const navigate = useNavigate();\n  const { data } = useFetchContactsQuery();\n  const names = data?.map((contact) => contact.name);\n  const [addContact] = useAddContactMutation();\n  const [updateContact] = useUpdateContactMutation();\n  const handleInputChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        return;\n      case \"number\":\n        setNumber(value);\n        return;\n      default:\n        return;\n    }\n  };\n  const onAddContact = async (name, number) => {\n    if (names.includes(name)) {\n      toast.error(`${name} is already in contacts!`);\n      return;\n    }\n    const data = await addContact({ name, number }).unwrap();\n    if (data.id) {\n      toast.success(`${name} was added to contacts`);\n      navigate(\"/contacts\");\n    }\n    if (data.message)\n      toast.error(`Can't add ${name} to contacts, please try again`);\n  };\n  const onEditContact = async (name, number) => {\n    const data = await updateContact({ id, name, number }).unwrap();\n    if (data.id) {\n      toast.success(`${name} was successfully updated`);\n      navigate(\"/contacts\");\n    }\n    if (data.message) toast.error(`Can't update ${name}, please try again`);\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    if (type === \"Add\") onAddContact(name, number);\n    if (type === \"Edit\") onEditContact(name, number);\n  };\n\n  return (\n    <form className={type === \"Add\" ? s.form : s.edit} onSubmit={handleSubmit}>\n      <label className={type === \"Add\" ? s.label : s.labelEdit}>\n        Name\n        <input\n          className={type === \"Add\" ? s.input : s.inputEdit}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          placeholder=\" \"\n          required\n          value={name}\n          onInput={handleInputChange}\n        />\n      </label>\n      <label className={type === \"Add\" ? s.label : s.labelEdit}>\n        Number\n        <input\n          className={type === \"Add\" ? s.input : s.inputEdit}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          placeholder=\" \"\n          required\n          value={number}\n          onInput={handleInputChange}\n        />\n      </label>\n      <span>\n        <button className={s.btn} type=\"submit\">\n          Save\n        </button>\n        {type === \"Edit\" && (\n          <Button text=\"Cancel\" onClick={() => setEdit(false)} />\n        )}\n      </span>\n    </form>\n  );\n}\nContactForm.propTypes = {\n  type: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  initialName: PropTypes.string,\n  initialNumber: PropTypes.string,\n  setEdit: PropTypes.func,\n};\nexport default ContactForm;\n","import ContactForm from \"components/ContactForm\";\n\nfunction Add() {\n  return <ContactForm type=\"Add\" />;\n}\n\nexport default Add;\n","import { Fragment } from 'react';\nimport AuthForm from 'components/AuthForm';\n\nfunction Register() {\n  return (\n    <Fragment>\n      <AuthForm type=\"Signup\" />\n    </Fragment>\n  );\n}\n\nexport default Register;\n"],"names":["text","onClick","type","className","s","id","initialName","initialNumber","setEdit","useState","name","setName","number","setNumber","navigate","useNavigate","data","useFetchContactsQuery","names","map","contact","useAddContactMutation","addContact","useUpdateContactMutation","updateContact","handleInputChange","e","target","value","onAddContact","includes","toast","unwrap","message","onEditContact","handleSubmit","preventDefault","onSubmit","pattern","title","placeholder","required","onInput","Button","Fragment"],"sourceRoot":""}